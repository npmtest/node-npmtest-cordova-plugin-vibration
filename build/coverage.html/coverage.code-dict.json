{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-vibration/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_vibration */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-vibration/lib.npmtest_cordova_plugin_vibration.js":"/* istanbul instrument in package npmtest_cordova_plugin_vibration */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_vibration = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_vibration = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-vibration/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-vibration && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_vibration */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_vibration\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_vibration.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_vibration.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_vibration.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_vibration.__dirname + '/lib.npmtest_cordova_plugin_vibration.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-vibration/node_modules/cordova-plugin-vibration/www/vibration.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec');\n\n/**\n * Provides access to the vibration mechanism on the device.\n */\n\nmodule.exports = {\n\n    /**\n     * Vibrates the device for a given amount of time or for a given pattern or immediately cancels any ongoing vibrations (depending on the parameter).\n     *\n     * @param {Integer} param       The number of milliseconds to vibrate (if 0, cancels vibration)\n     *\n     *\n     * @param {Array of Integer} param    Pattern with which to vibrate the device.\n     *                                      Pass in an array of integers that\n     *                                      are the durations for which to\n     *                                      turn on or off the vibrator in\n     *                                      milliseconds. The FIRST value\n     *                                      indicates the\n     *                                      number of milliseconds for which\n     *                                      to keep the vibrator ON before\n     *                                      turning it off. The NEXT value indicates the\n     *                                      number of milliseconds for which\n     *                                      to keep the vibrator OFF before\n     *                                      turning it on. Subsequent values\n     *                                      alternate between durations in\n     *                                      milliseconds to turn the vibrator\n     *                                      off or to turn the vibrator on.\n     *                                      (if empty, cancels vibration)\n     */\n    vibrate: function(param) {\n\n        /* Aligning with w3c spec */\n\n        //vibrate\n        if ((typeof param == 'number') && param !== 0)\n            exec(null, null, \"Vibration\", \"vibrate\", [param]);\n\n        //vibrate with array ( i.e. vibrate([3000]) )\n        else if ((typeof param == 'object') && param.length == 1)\n        {\n            //cancel if vibrate([0])\n            if (param[0] === 0)\n                exec(null, null, \"Vibration\", \"cancelVibration\", []);\n\n            //else vibrate\n            else\n                exec(null, null, \"Vibration\", \"vibrate\", [param[0]]);\n        }\n\n        //vibrate with a pattern\n        else if ((typeof param == 'object') && param.length > 1)\n        {\n            var repeat = -1; //no repeat\n            exec(null, null, \"Vibration\", \"vibrateWithPattern\", [param, repeat]);\n        }\n\n        //cancel vibration (param = 0 or [])\n        else\n            exec(null, null, \"Vibration\", \"cancelVibration\", []);\n\n        return true;\n    },\n\n    /**\n     * Vibrates the device with a given pattern.\n     *\n     * @param {Array of Integer} pattern    Pattern with which to vibrate the device.\n     *                                      Pass in an array of integers that\n     *                                      are the durations for which to\n     *                                      turn on or off the vibrator in\n     *                                      milliseconds. The first value\n     *                                      indicates the number of milliseconds\n     *                                      to wait before turning the vibrator\n     *                                      on. The next value indicates the\n     *                                      number of milliseconds for which\n     *                                      to keep the vibrator on before\n     *                                      turning it off. Subsequent values\n     *                                      alternate between durations in\n     *                                      milliseconds to turn the vibrator\n     *                                      off or to turn the vibrator on.\n     *\n     * @param {Integer} repeat              Optional index into the pattern array at which\n     *                                      to start repeating (will repeat until canceled),\n     *                                      or -1 for no repetition (default).\n     */\n    vibrateWithPattern: function(pattern, repeat) {\n        repeat = (typeof repeat !== \"undefined\") ? repeat : -1;\n        var pattern = pattern.unshift(0); //add a 0 at beginning for backwards compatibility from w3c spec\n        exec(null, null, \"Vibration\", \"vibrateWithPattern\", [pattern, repeat]);\n    },\n\n    /**\n     * Immediately cancels any currently running vibration.\n     */\n    cancelVibration: function() {\n        exec(null, null, \"Vibration\", \"cancelVibration\", []);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-vibration/node_modules/cordova-plugin-vibration/src/blackberry10/index.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global PluginResult, JNEXT */\n\nvar vibration;\n\nmodule.exports = {\n    vibrate: function (success, fail, args, env) {\n        var result = new PluginResult(args, env),\n            duration = args[0],\n            response = vibration.getInstance().vibrate(duration);\n        result.ok(response, false);\n    }\n};\n\n///////////////////////////////////////////////////////////////////\n// JavaScript wrapper for JNEXT plugin\n///////////////////////////////////////////////////////////////////\n\nJNEXT.Vibration = function () {\n    var self = this,\n        hasInstance = false;\n\n    self.vibrate = function (duration) {\n        //This is how Javascript calls into native\n        return JNEXT.invoke(self.m_id, \"vibrate \" + duration);\n    };\n\n    self.init = function () {\n        //Checks that the jnext library is present and loads it\n        if (!JNEXT.require(\"libVibration\")) {\n            return false;\n        }\n\n        //Creates the native object that this interface will call\n        self.m_id = JNEXT.createObject(\"libVibration.Vibration\");\n\n        if (self.m_id === \"\") {\n            return false;\n        }\n\n        //Registers for the JNEXT event loop\n        JNEXT.registerEvents(self);\n    };\n\n    self.m_id = \"\";\n\n    //Used by JNEXT library to get the ID\n    self.getId = function () {\n        return self.m_id;\n    };\n\n    //Not truly required but useful for instance management\n    self.getInstance = function () {\n        if (!hasInstance) {\n            self.init();\n            hasInstance = true;\n        }\n        return self;\n    };\n};\n\nvibration = new JNEXT.Vibration();\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-vibration/node_modules/cordova-plugin-vibration/src/browser/Vibration.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nmodule.exports = {\n    vibrate: function(success, fail, milliseconds) {\n        console.log('Vibration is not supported');\n        return false;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-vibration/node_modules/cordova-plugin-vibration/src/firefoxos/VibrationProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nmodule.exports = {\n\n    vibrate: function(success, fail, milliseconds) {\n        if (navigator.notification.vibrate) {\n            navigator.vibrate(milliseconds);\n        } else {\n            console.log (\"cordova/plugin/firefoxos/vibration, vibrate API does not exist\");\n        }\n    }\n};\n\nrequire(\"cordova/exec/proxy\").add(\"Vibration\", module.exports);","/home/travis/build/npmtest/node-npmtest-cordova-plugin-vibration/node_modules/cordova-plugin-vibration/src/tizen/VibrationProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nmodule.exports = {\n    vibrate: function(milliseconds) {\n        if (navigator.vibrate) {\n            navigator.vibrate(milliseconds);\n        }\n    }\n};\n\nrequire(\"cordova/tizen/commandProxy\").add(\"Vibration\", module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-vibration/node_modules/cordova-plugin-vibration/src/windows/VibrationProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n\n/* global Windows, WinJS, Vibration */\n\nfunction checkReqs(actionName, fail) {\n    if (!(Windows.Phone && Windows.Phone.Devices && Windows.Phone.Devices.Notification && Windows.Phone.Devices.Notification.VibrationDevice) && WinJS.Utilities.isPhone !== true) {       \n        fail(actionName + ' is unsupported by this platform.');\n        return false;\n    }\n\n    return true;\n}\n\nfunction tryDoAction(actionName, success, fail, args, action) {\n    try {\n        if (checkReqs(actionName, fail) !== true) {\n            return;\n        }\n\n        action(args);\n        success();\n    } catch (e) {\n        fail('Error occured while trying to ' + actionName + ': ' + e);\n    }\n}\n\n/** \n * @typedef patternParsingResult\n * @type {Object}\n * @property {Array} result.parsed - Array with parsed integers\n * @property {Boolean} result.passed - false in case of parsing error\n * @property {*} result.failedItem - The item, which could not be parsed\n */\n\n/**\n * Tries to convert pattern values to int\n * @param  {Array} pattern Array of delays\n * @returns {patternParsingResult} result\n */\nfunction tryParsePatternValues(pattern) {\n    var passed = true, failedItem;\n\n    pattern = pattern.map(function (item) {\n        var num = parseInt(item, 10);\n        if (isNaN(num)) {\n            failedItem = item;\n            passed = false;\n        }\n\n        return num;\n    });\n\n    return {\n        parsed: pattern,\n        passed: passed,\n        failedItem: failedItem\n    };\n}\n\n/** \n * @typedef checkPatternReqsResult\n * @type {Object}\n * @property {Array} result.patternParsingResult - Array with parsed integers\n * @property {Boolean} result.passed - true if all params are OK\n */\n\n/**\n * Checks params for vibrateWithPattern function\n * @return {checkPatternReqsResult}\n */\nfunction checkPatternReqs(args, fail) {\n    var patternParsingResult = tryParsePatternValues(args[0]);\n    var repeat = args[1];\n    var passed = true, errMsg = '';\n\n    if (!patternParsingResult.passed) {\n        errMsg += 'Could not parse ' + patternParsingResult.failedItem + ' in the vibration pattern';\n        passed = false;\n    }\n\n    if (repeat !== -1 && (repeat < 0 || repeat > args[0].length - 1)) {\n        errMsg += '\\nrepeat parameter is out of range: ' + repeat;\n        passed = false;\n    }\n\n    if (!passed) {\n        console.error(errMsg);\n        if (fail) {\n            fail(errMsg);\n        }\n    }\n\n    return {\n        passed: passed,\n        patternParsingResult: patternParsingResult\n    };\n}\n\n/**\n * vibrateWithPattern with `repeat` support\n * @param  {Array} patternArr Full pattern array\n * @param  {Boolean} shouldRepeat Indication on whether the vibration should be cycled\n * @param  {Function} fail Fail callback\n * @param  {Array} patternCycle Cycled part of the pattern array\n * @return {Promise} Promise chaining single vibrate/pause actions\n */\nfunction vibratePattern(patternArr, shouldRepeat, fail, patternCycle) {\n    return patternArr.reduce(function (previousValue, currentValue, index) {\n        if (index % 2 === 0) {\n            return previousValue.then(function () {\n                module.exports.vibrate(function () { }, function (err) {\n                    console.error(err);\n                    if (fail) {\n                        fail(err);\n                    }\n                }, [currentValue]);\n\n                if (index === patternArr.length - 1 && shouldRepeat) {\n                    return WinJS.Promise.timeout(currentValue).then(function () {\n                        return vibratePattern(patternCycle, true, fail, patternCycle);\n                    });\n                } else {\n                    return WinJS.Promise.timeout(currentValue);\n                }\n            });\n        } else {\n            return previousValue.then(function () {\n                if (index === patternArr.length - 1 && shouldRepeat) {\n                    return WinJS.Promise.timeout(currentValue).then(function () {\n                        return vibratePattern(patternCycle, true, fail, patternCycle);\n                    });\n                } else {\n                    return WinJS.Promise.timeout(currentValue);\n                }\n            });\n        }\n    }, WinJS.Promise.as());\n}\n\nvar DEFAULT_DURATION = 200;\nvar patternChainPromise;\n\nvar VibrationDevice = (Windows.Phone && Windows.Phone.Devices && Windows.Phone.Devices.Notification && Windows.Phone.Devices.Notification.VibrationDevice && Windows.Phone.Devices.Notification.VibrationDevice);\nif (VibrationDevice) {\n    // Windows Phone 10 code paths\n    module.exports = {\n        vibrate: function(success, fail, args) {\n            try {\n                var duration = parseInt(args[0]);\n                if (isNaN(duration)) {\n                    duration = DEFAULT_DURATION;\n                }\n                VibrationDevice.getDefault().vibrate(duration);\n                success();\n            }\n            catch (e) {\n                fail(e);\n            }\n        }, \n        vibrateWithPattern: function (success, fail, args) {\n            // Cancel current vibrations first\n            module.exports.cancelVibration(function () {\n                var checkReqsResult = checkPatternReqs(args, fail);\n                if (!checkReqsResult.passed) {\n                    return;\n                }\n\n                var pattern = checkReqsResult.patternParsingResult.parsed;\n                var repeatFromIndex = args[1];\n                var shouldRepeat = (repeatFromIndex !== -1);\n                var patternCycle;\n\n                if (shouldRepeat) {\n                    patternCycle = pattern.slice(repeatFromIndex);\n                }\n\n                patternChainPromise = vibratePattern(pattern, shouldRepeat, fail, patternCycle);\n            }, fail);\n        },\n        cancelVibration: function(success, fail, args) {\n            try {\n                if (patternChainPromise) {\n                    patternChainPromise.cancel();\n                }\n                VibrationDevice.getDefault().cancel();\n                if (success) {\n                    success();\n                }\n            }\n            catch (e) {\n                if (fail) {\n                    fail(e);\n                }\n            }\n        }\n    };\n} else if (typeof Vibration !== 'undefined' && Vibration.Vibration) { \n    // Windows Phone 8.1 code paths\n    module.exports = {\n        vibrate: function (success, fail, args) {\n            tryDoAction(\"vibrate\", success, fail, args, Vibration.Vibration.vibrate);\n        },\n\n        vibrateWithPattern: function (success, fail, args) {\n            tryDoAction(\"vibrate\", success, fail, [DEFAULT_DURATION], Vibration.Vibration.vibrate);\n        },\n\n        cancelVibration: function (success, fail, args) {\n            tryDoAction(\"cancelVibration\", success, fail, args, Vibration.Vibration.cancelVibration);\n        }\n    };\n} else {\n    // code paths where no vibration mechanism is present\n    module.exports = {\n        vibrate: function (success, fail) {\n            if (fail) {\n                fail('\"vibrate\" is unsupported by this device.');\n            }\n        },\n        vibrateWithPattern: function (success, fail, args) {\n            if (fail) {\n                fail('\"vibrateWithPattern\" is unsupported by this device.');\n            }\n        },\n\n        cancelVibration: function (success, fail, args) {\n            if (success) {\n                success();\n            }\n        }\n    };\n}\n\nrequire(\"cordova/exec/proxy\").add(\"Vibration\", module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-vibration/node_modules/cordova-plugin-vibration/www/blackberry10/vibrate.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar vibrate = function(duration) {\n    navigator.vibrate(duration);\n};\n\nmodule.exports = vibrate;\n"}